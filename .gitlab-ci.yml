# SPDX-FileCopyrightText: 2019â€“2024 Pynguin Contributors
#
# SPDX-License-Identifier: MIT

image: python:${PYTHON_VERSION}

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID         # Execute jobs in merge request context
    - if: $CI_COMMIT_BRANCH == 'main'  # Execute jobs when a new commit is pushed to main branch

cache:
  key: virtualenv
  paths:
    - .venv/
    - .cache/pip
    - .cache/pypoetry

stages:
  - build
  - lint
  - test
  - security
  - deploy

before_script:
  - python --version
  - pip install poetry
  - poetry config virtualenvs.in-project true
  - poetry install

.unit-tests: &unit-tests
  stage: test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    - poetry run pytest -q --cov=pynguin --cov=tests --cov-branch --cov-report html:cov_html --cov-report xml:coverage.xml --cov-report=term-missing --junitxml=report.xml tests/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit:
        report.xml
    paths:
      - cov_html
  needs: ["isort", "black", "reuse"]

unit-tests:python-3.10:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.10-bookworm'

#unit-tests:python-3.11:
#  <<: *unit-tests
#  allow_failure: true
#  variables:
#    PYTHON_VERSION: '3.11-rc-bookworm'

.nightly-tests:
  only:
    - schedules
  stage: test
  before_script:
    - python --version
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
    - poetry add --group dev pytest-random-order
  script:
    - for ((i=1; i<=10; i++)); do echo "test run ${i}\n"; poetry run pytest -q --cov=pynguin --cov=tests --cov-branch --random-order --random-order-bucket=global ; done
  needs: ["unit-tests:python-3.10"]

nightly-tests:python-3.10:
  extends: .nightly-tests
  variables:
    PYTHON_VERSION: '3.10-bookworm'

#nightly-tests:python-3.11:
#  extends: .nightly-tests
#  allow_failure: true
#  variables:
#    PYTHON_VERSION: '3.11-rc-bookworm'

memory-profile:
  only:
    - schedules
  stage: lint
  image: python:3.10-bookworm
  before_script:
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
    - poetry add --dev memray pytest-memray
  script:
    - poetry run pytest --memray tests/
  needs: ["isort", "black", "reuse"]

mypy:
  stage: lint
  image: python:3.10-bookworm
  script:
    - poetry run mypy
  needs: ["isort", "black"]

ruff:
  stage: lint
  image: python:3.10-bookworm
  script:
    - poetry run ruff src/pynguin
  needs: ["isort", "black"]

isort:
  stage: build
  image: python:3.10-bookworm
  script:
    - poetry run isort **/*.py -c -v --profile black

black:
  stage: build
  image: python:3.10-bookworm
  script:
    - poetry run black --check .

sphinx:
  stage: build
  image: python:3.10-bookworm
  script:
    - poetry run sphinx-build docs docs/_build
  artifacts:
    expire_in: 1 week
    paths:
      - docs/_build

# check license declarations etc.
reuse:
  stage: lint
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  before_script:
    - python --version
  script:
    - reuse lint
  needs: []
